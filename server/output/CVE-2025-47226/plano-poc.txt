1. RESUMO DA VULNERABILIDADE

Descrição técnica da falha:
CVE-2025-47226 refere-se a uma vulnerabilidade de Insecure Direct Object Reference (IDOR) na aplicação Snipe-IT, versão anterior à v8.1.0. A falha ocorre devido à implementação incorreta de controle de acesso na endpoint `/locations/{id}/printassigned`, permitindo que usuários autenticados acessem informações de ativos de outros departamentos ao manipular o parâmetro `location_id`. Essa vulnerabilidade possibilita a visualização não autorizada de dados sensíveis, quebrando o princípio de segurança de acesso baseado em privilégios.

Componentes afetados:
- Aplicação Snipe-IT desenvolvida pela Grokability.
- Endpoint `/locations/{id}/printassigned` na versão vulnerável.

Versões vulneráveis identificadas:
- Todas as versões até v8.0.4 (inclusive), com correção na versão v8.1.0.

Severidade e impacto:
- Alta severidade devido à possibilidade de vazamento de informações internas.
- Impacta a confidencialidade e integridade dos dados de ativos.
- Potencial para uso em ataques de escalonamento de privilégios ou espionagem corporativa.

2. COMPONENTES NECESSÁRIOS PARA POC

Sistema operacional base:
- Linux (preferencialmente Ubuntu 20.04 ou Debian 11 para compatibilidade).

Aplicações/serviços vulneráveis:
- Snipe-IT versão <= v8.0.4.
- Servidor web (Nginx ou Apache) configurado para servir a aplicação PHP.

Ferramentas de ataque:
- Python 3.x para scripts de automação.
- Ferramentas de manipulação de requisições HTTP (curl, Postman, Burp Suite).
- Código de PoC disponível em GitHub (exemplo: koyomihack00/CVE-2025-47226).

Dependências específicas:
- PHP >=7.4 com extensões necessárias (pdo, mbstring, etc).
- Banco de dados MySQL/MariaDB.
- Composer para gerenciamento de dependências PHP.

3. AMBIENTE DE ATAQUE

Configurações necessárias:
- Ambiente de desenvolvimento com Docker para simular a aplicação vulnerável.
- Configuração de rede isolada para testes.
- Credenciais de usuário autenticado (pode-se criar um usuário de teste com privilégios mínimos).

Ferramentas específicas:
- Docker Compose para orquestração.
- Scripts de exploração (disponíveis no repositório PoC).
- Proxy interceptador (Burp Suite ou OWASP ZAP) para análise de requisições.

Scripts ou exploits requeridos:
- Script Python ou Bash para automatizar a manipulação do parâmetro `location_id`.
- Exploit de IDOR baseado na PoC disponível em: https://github.com/koyomihack00/CVE-2025-47226.

4. AMBIENTE ALVO

Sistema/aplicação vulnerável:
- Instância do Snipe-IT versão 8.0.4 ou anterior, instalada localmente ou em ambiente controlado.

Configurações específicas:
- Configuração padrão ou customizada que permita autenticação de usuários.
- Endpoint `/locations/{id}/printassigned` acessível após login.

Versões exatas recomendadas:
- Snipe-IT v8.0.4 (para reproduzir a vulnerabilidade).
- PHP 7.4, MySQL 8.0.

5. PLANO DE EXPLORAÇÃO

Passos detalhados:
a) Preparar o ambiente:
- Deploy do Snipe-IT v8.0.4 usando Docker (detalhes na seção 6).
- Criar usuários autenticados com privilégios mínimos.

b) Obter cookies de sessão:
- Realizar login via navegador ou curl:
```bash
curl -c cookies.txt -d "email=user@example.com&password=senha" http://localhost:8080/login
```

c) Identificar um `location_id` válido:
- Listar locais acessíveis:
```bash
curl -b cookies.txt http://localhost:8080/locations
```

d) Explorar a vulnerabilidade:
- Manipular o parâmetro `location_id` na requisição:
```bash
curl -b cookies.txt "http://localhost:8080/locations/ID_ALVO/printassigned"
```
- Substituir `ID_ALVO` por um `location_id` de outro departamento.

e) Verificar o retorno:
- A resposta deve conter informações de ativos de outros departamentos, indicando sucesso na exploração.

f) Automação:
- Utilizar o script PoC para varredura automatizada de múltiplos IDs.

6. REQUISITOS TÉCNICOS

Recursos mínimos:
- 2 vCPUs, 4GB RAM, 20GB de armazenamento (para ambiente Docker completo).

Configurações de rede:
- Rede isolada com portas 80/443 expostas.
- Acesso ao banco de dados e aplicação via localhost ou rede interna.

Permissões necessárias:
- Permissões de leitura/escrita no sistema de arquivos para Docker.
- Credenciais de usuário autenticado na aplicação.

---

**Notas adicionais para implementação no Docker:**

- Criar um `docker-compose.yml` com serviços:
  - `db`: MySQL 8.0.
  - `app`: PHP 7.4 com Snipe-IT 8.0.4.
  - `web`: Nginx configurado para servir a aplicação.

- Configurar o banco de dados com as credenciais padrão e importar a base de dados de teste.

- Garantir que o endpoint `/locations/{id}/printassigned` esteja acessível e que o sistema esteja autenticado.

- Incorporar o script PoC do GitHub na imagem Docker ou executar externamente.

---

**Exemplo de trecho do docker-compose.yml (resumido):**

```yaml
version: '3.8'
services:
  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: snipeit
      MYSQL_USER: snipeit
      MYSQL_PASSWORD: snipeitpass
    ports:
      - "3306:3306"
  app:
    build: ./snipeit
    depends_on:
      - db
    environment:
      DB_HOST: db
      DB_DATABASE: snipeit
      DB_USERNAME: snipeit
      DB_PASSWORD: snipeitpass
    ports:
      - "8080:80"
  web:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
```

**Conclusão:**
Este plano detalhado fornece uma abordagem técnica para montar um ambiente de PoC para CVE-2025-47226, incluindo versões específicas, passos de exploração e configurações necessárias. A implementação deve seguir rigorosamente os passos para garantir a reprodução controlada da vulnerabilidade, facilitando testes de segurança e validação de mitigação.