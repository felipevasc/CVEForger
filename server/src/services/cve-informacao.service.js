const axios = require('axios');

class CVEInformacaoServico {
  constructor() {
    this.urlBaseCVE = 'https://services.nvd.nist.gov/rest/json/cves/2.0';
    this.urlBaseMitre = 'https://cve.mitre.org/cgi-bin/cvename.cgi';
    this.timeout = 30000;
  }

  async obterInformacoesCVE(numeroCVE) {
    try {
      console.log(`Buscando informações da CVE: ${numeroCVE}`);

      const informacoesNVD = await this.buscarNVD(numeroCVE);
      const informacoesMitre = await this.buscarMitre(numeroCVE);

      const informacoesConsolidadas = this.consolidarInformacoes(
        numeroCVE,
        informacoesNVD,
        informacoesMitre
      );

      return informacoesConsolidadas;
    } catch (erro) {
      console.error(
        `Erro ao obter informações da CVE ${numeroCVE}:`,
        erro.message
      );
      throw new Error(`Falha ao buscar informações da CVE: ${erro.message}`);
    }
  }

  async buscarNVD(numeroCVE) {
    try {
      const resposta = await axios.get(`${this.urlBaseCVE}`, {
        params: {
          cveId: numeroCVE,
        },
        timeout: this.timeout,
        headers: {
          'User-Agent': 'CVE-Analysis-Tool/1.0',
        },
      });

      if (
        resposta.data.vulnerabilities &&
        resposta.data.vulnerabilities.length > 0
      ) {
        const vulnerabilidade = resposta.data.vulnerabilities[0];
        return this.processarDadosNVD(vulnerabilidade);
      }

      return null;
    } catch (erro) {
      console.warn(`Erro ao buscar no NVD: ${erro.message}`);
      return null;
    }
  }

  async buscarMitre(numeroCVE) {
    try {
      const resposta = await axios.get(
        `${this.urlBaseMitre}?name=${numeroCVE}`,
        {
          timeout: this.timeout,
          headers: {
            'User-Agent': 'CVE-Analysis-Tool/1.0',
          },
        }
      );

      if (resposta.data) {
        return this.processarDadosMitre(resposta.data);
      }

      return null;
    } catch (erro) {
      console.warn(`Erro ao buscar no MITRE: ${erro.message}`);
      return null;
    }
  }

  processarDadosNVD(vulnerabilidade) {
    const cve = vulnerabilidade.cve;

    return {
      fonte: 'NVD',
      id: cve.id,
      descricao: this.extrairDescricao(cve.descriptions),
      severidade: this.extrairSeveridade(vulnerabilidade.metrics),
      vetorAtaque: this.extrairVetorAtaque(vulnerabilidade.metrics),
      configuracoes: this.extrairConfiguracoes(cve.configurations),
      referencias: this.extrairReferencias(cve.references),
      dataPublicacao: cve.published,
      dataModificacao: cve.lastModified,
      status: cve.vulnStatus,
    };
  }

  processarDadosMitre(dadosHTML) {
    const informacoes = {
      fonte: 'MITRE',
      conteudoHTML: dadosHTML.substring(0, 2000),
    };

    const descricaoMatch = dadosHTML.match(
      /<td[^>]*>\s*([^<]+(?:<[^>]+>[^<]*)*)\s*<\/td>/i
    );
    if (descricaoMatch) {
      informacoes.descricao = descricaoMatch[1].replace(/<[^>]+>/g, '').trim();
    }

    return informacoes;
  }

  extrairDescricao(descriptions) {
    if (!descriptions || descriptions.length === 0) return '';

    const descricaoPortugues = descriptions.find((d) => d.lang === 'pt-BR');
    if (descricaoPortugues) return descricaoPortugues.value;

    const descricaoIngles = descriptions.find((d) => d.lang === 'en');
    return descricaoIngles ? descricaoIngles.value : '';
  }

  extrairSeveridade(metrics) {
    if (!metrics) return null;

    if (metrics.cvssMetricV31) {
      const cvss = metrics.cvssMetricV31[0];
      return {
        versao: '3.1',
        pontuacaoBase: cvss.cvssData.baseScore,
        severidade: cvss.cvssData.baseSeverity,
        vetor: cvss.cvssData.vectorString,
      };
    }

    if (metrics.cvssMetricV30) {
      const cvss = metrics.cvssMetricV30[0];
      return {
        versao: '3.0',
        pontuacaoBase: cvss.cvssData.baseScore,
        severidade: cvss.cvssData.baseSeverity,
        vetor: cvss.cvssData.vectorString,
      };
    }

    return null;
  }

  extrairVetorAtaque(metrics) {
    const severidade = this.extrairSeveridade(metrics);
    if (!severidade || !severidade.vetor) return null;

    const vetorDetalhes = this.analisarVetorCVSS(severidade.vetor);
    return vetorDetalhes;
  }

  analisarVetorCVSS(vetorString) {
    const componentes = vetorString.split('/');
    const analise = {};

    componentes.forEach((componente) => {
      const [chave, valor] = componente.split(':');
      switch (chave) {
        case 'AV':
          analise.vetorAcesso = this.traduzirVetorAcesso(valor);
          break;
        case 'AC':
          analise.complexidadeAtaque = this.traduzirComplexidadeAtaque(valor);
          break;
        case 'PR':
          analise.privilegiosRequeridos = this.traduzirPrivilegios(valor);
          break;
        case 'UI':
          analise.interacaoUsuario = this.traduzirInteracaoUsuario(valor);
          break;
      }
    });

    return analise;
  }

  traduzirVetorAcesso(valor) {
    const mapeamento = {
      N: 'Rede',
      A: 'Rede Adjacente',
      L: 'Local',
      P: 'Físico',
    };
    return mapeamento[valor] || valor;
  }

  traduzirComplexidadeAtaque(valor) {
    const mapeamento = {
      L: 'Baixa',
      H: 'Alta',
    };
    return mapeamento[valor] || valor;
  }

  traduzirPrivilegios(valor) {
    const mapeamento = {
      N: 'Nenhum',
      L: 'Baixo',
      H: 'Alto',
    };
    return mapeamento[valor] || valor;
  }

  traduzirInteracaoUsuario(valor) {
    const mapeamento = {
      N: 'Nenhuma',
      R: 'Requerida',
    };
    return mapeamento[valor] || valor;
  }

  extrairConfiguracoes(configurations) {
    if (!configurations || configurations.length === 0) return [];

    const configuracoesProdutos = [];

    configurations.forEach((config) => {
      if (config.nodes) {
        config.nodes.forEach((node) => {
          if (node.cpeMatch) {
            node.cpeMatch.forEach((cpe) => {
              if (cpe.vulnerable) {
                configuracoesProdutos.push({
                  produto: this.extrairProdutoCPE(cpe.criteria),
                  versaoInicio: cpe.versionStartIncluding,
                  versaoFim: cpe.versionEndExcluding,
                  criterio: cpe.criteria,
                });
              }
            });
          }
        });
      }
    });

    return configuracoesProdutos;
  }

  extrairProdutoCPE(criterio) {
    const partes = criterio.split(':');
    if (partes.length >= 5) {
      return {
        fornecedor: partes[3],
        produto: partes[4],
        versao: partes[5] || '*',
      };
    }
    return { criterio: criterio };
  }

  extrairReferencias(references) {
    if (!references || references.length === 0) return [];

    return references.map((ref) => ({
      url: ref.url,
      fonte: ref.source || 'Desconhecida',
      tags: ref.tags || [],
    }));
  }

  consolidarInformacoes(numeroCVE, dadosNVD, dadosMitre) {
    const informacoesConsolidadas = {
      numeroCVE: numeroCVE,
      fontes: [],
      descricao: '',
      severidade: null,
      vetorAtaque: null,
      produtosAfetados: [],
      referencias: [],
      dataProcessamento: new Date().toISOString(),
    };

    if (dadosNVD) {
      informacoesConsolidadas.fontes.push('NVD');
      informacoesConsolidadas.descricao =
        dadosNVD.descricao || informacoesConsolidadas.descricao;
      informacoesConsolidadas.severidade = dadosNVD.severidade;
      informacoesConsolidadas.vetorAtaque = dadosNVD.vetorAtaque;
      informacoesConsolidadas.produtosAfetados = dadosNVD.configuracoes || [];
      informacoesConsolidadas.referencias = dadosNVD.referencias || [];
      informacoesConsolidadas.dataPublicacao = dadosNVD.dataPublicacao;
      informacoesConsolidadas.status = dadosNVD.status;
    }

    if (dadosMitre) {
      informacoesConsolidadas.fontes.push('MITRE');
      if (!informacoesConsolidadas.descricao && dadosMitre.descricao) {
        informacoesConsolidadas.descricao = dadosMitre.descricao;
      }
    }

    return informacoesConsolidadas;
  }

  async buscarInformacoesComplementares(numeroCVE) {
    const fontesComplementares = [
      'https://www.cvedetails.com/cve/' + numeroCVE,
      'https://nvd.nist.gov/vuln/detail/' + numeroCVE,
    ];

    const informacoesComplementares = [];

    for (const url of fontesComplementares) {
      try {
        const resposta = await axios.get(url, {
          timeout: this.timeout,
          headers: {
            'User-Agent': 'CVE-Analysis-Tool/1.0',
          },
        });

        informacoesComplementares.push({
          fonte: url,
          disponivel: true,
          tamanhoConteudo: resposta.data.length,
        });
      } catch (erro) {
        informacoesComplementares.push({
          fonte: url,
          disponivel: false,
          erro: erro.message,
        });
      }
    }

    return informacoesComplementares;
  }
}

module.exports = new CVEInformacaoServico();
